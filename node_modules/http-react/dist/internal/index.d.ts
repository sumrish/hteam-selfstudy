/// <reference types="react" />
import { CacheStoreType, FetchContextType } from '../types';
/**
 * This marks which requests are running
 */
export declare const runningRequests: any;
export declare function isPending(id: any): boolean;
export declare const statusCodes: any;
export declare const lastResponses: any;
/**
 * Previous request configurations (useful for deduplication)
 */
export declare const previousConfig: any;
export declare const previousProps: any;
export declare const valuesMemory: any;
/**
 * Online / offline
 */
export declare const onlineHandled: any;
export declare const offlineHandled: any;
/**
 * To let know if it's revalidating there is at least one succesful request
 */
export declare const hasData: any;
/**
 * Max pagination age
 */
export declare const pageStarted: any;
export declare const maxAges: any;
/**
 * For Suspense
 */
export declare const willSuspend: any;
export declare const resolvedRequests: any;
export declare const resolvedHookCalls: any;
export declare const resolvedOnErrorCalls: any;
export declare const abortControllers: any;
export declare const canDebounce: any;
export declare const requestInitialTimes: any;
export declare const requestResponseTimes: any;
export declare const requestStarts: any;
export declare const requestEnds: any;
export declare const suspenseRevalidationStarted: any;
export declare const maxPaginationAges: any;
/**
 * Request with errors
 */
export declare const hasErrors: any;
/**
 * Suspense calls that resolved
 */
export declare const suspenseInitialized: any;
/**
 * Defaults used as fallback data (works with SSR)
 */
export declare const fetcherDefaults: any;
export declare const cacheForMutation: any;
export declare const runningMutate: any;
export declare const urls: {
    [k: string]: {
        realUrl: string;
        rawUrl: string;
    };
};
/**
 * Default store cache
 */
export declare const defaultCache: CacheStoreType;
export declare const requestsProvider: {
    addListener(requestId?: any, listener?: any): void;
    removeListener(requestId?: any, listener?: any): void;
    emit(requestId?: any, payload?: any): void;
};
export declare const FetchContext: import("react").Context<FetchContextType>;
export declare function useHRFContext(): FetchContextType;
