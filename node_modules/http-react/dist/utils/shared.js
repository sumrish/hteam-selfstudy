"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = exports.createRequestFn = exports.setURLParams = exports.queue = exports.isFormData = exports.serialize = exports.jsonCompare = exports.hasBaseUrl = exports.isFunction = exports.isDefined = exports.getRequestHeaders = exports.notNull = exports.windowExists = void 0;
var constants_1 = require("../internal/constants");
exports.windowExists = typeof window !== 'undefined';
function notNull(target) {
    return target !== null;
}
exports.notNull = notNull;
function getRequestHeaders(req) {
    // @ts-ignore Gets the request headers
    return Object.fromEntries(new Headers(req.headers).entries());
}
exports.getRequestHeaders = getRequestHeaders;
function isDefined(target) {
    return typeof target !== 'undefined';
}
exports.isDefined = isDefined;
function isFunction(target) {
    return typeof target === 'function';
}
exports.isFunction = isFunction;
function hasBaseUrl(target) {
    return target.startsWith('http://') || target.startsWith('https://');
}
exports.hasBaseUrl = hasBaseUrl;
function jsonCompare(a, b) {
    return JSON.stringify(a) === JSON.stringify(b);
}
exports.jsonCompare = jsonCompare;
/**
 * A serialize function that returns a JSON string
 */
function serialize(input, replacer, space) {
    return JSON.stringify(input, replacer, space);
}
exports.serialize = serialize;
var isFormData = function (target) {
    if (typeof FormData !== 'undefined') {
        return target instanceof FormData;
    }
    else
        return false;
};
exports.isFormData = isFormData;
function canHaveBody(method) {
    return /(POST|PUT|DELETE|PATCH)/.test(method);
}
function queue(callback, time) {
    if (time === void 0) { time = 0; }
    var tm = setTimeout(function () {
        callback();
        clearTimeout(tm);
    }, time);
    return tm;
}
exports.queue = queue;
/**
 *
 * @param str The target string
 * @param $params The params to parse in the url
 *
 * Params should be separated by `"/"`, (e.g. `"/api/[resource]/:id"`)
 *
 * URL search params will not be affected
 */
function setURLParams(str, $params) {
    if (str === void 0) { str = ''; }
    if ($params === void 0) { $params = {}; }
    var hasQuery = str.includes('?');
    var queryString = '?' +
        str
            .split('?')
            .filter(function (_, i) { return i > 0; })
            .join('?');
    return (str
        .split('/')
        .map(function ($segment) {
        var segment = $segment.split('?')[0];
        if (segment.startsWith('[') && segment.endsWith(']')) {
            var paramName = segment.replace(/\[|\]/g, '');
            if (!(paramName in $params)) {
                console.warn("Param '".concat(paramName, "' does not exist in params configuration for '").concat(str, "'"));
                return paramName;
            }
            return $params[segment.replace(/\[|\]/g, '')];
        }
        else if (segment.startsWith(':')) {
            var paramName = segment.split('').slice(1).join('');
            if (!(paramName in $params)) {
                console.warn("Param '".concat(paramName, "' does not exist in params configuration for '").concat(str, "'"));
                return paramName;
            }
            return $params[paramName];
        }
        else {
            return segment;
        }
    })
        .join('/') + (hasQuery ? queryString : ''));
}
exports.setURLParams = setURLParams;
/**
 * Creates a new request function. This is for usage with fetcher and fetcher.extend
 */
function createRequestFn(method, baseUrl, $headers) {
    return function (url, init) {
        if (init === void 0) { init = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var def, _a, params, headers, _b, query, body, _c, $method, formatBody, _d, resolver, _e, onResolve, _f, onError, rawUrl, reqQueryString, reqConfig, r, requestUrl, req, data, err_1;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        def = init.default, _a = init.params, params = _a === void 0 ? {} : _a, headers = init.headers, _b = init.query, query = _b === void 0 ? {} : _b, body = init.body, _c = init.method, $method = _c === void 0 ? method : _c, formatBody = init.formatBody, _d = init.resolver, resolver = _d === void 0 ? constants_1.DEFAULT_RESOLVER : _d, _e = init.onResolve, onResolve = _e === void 0 ? function () { } : _e, _f = init.onError, onError = _f === void 0 ? function () { } : _f;
                        rawUrl = setURLParams(url, params);
                        reqQueryString = Object.keys(query)
                            .map(function (q) { return [q, query[q]].join('='); })
                            .join('&');
                        reqConfig = {
                            method: $method,
                            headers: __assign(__assign({ 'Content-Type': 'application/json' }, $headers), headers),
                            body: canHaveBody(method)
                                ? isFunction(formatBody)
                                    ? formatBody(body)
                                    : body
                                : undefined
                        };
                        r = undefined;
                        requestUrl = [
                            baseUrl || '',
                            rawUrl,
                            url.includes('?') ? '&' : '?',
                            reqQueryString
                        ].join('');
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, fetch(requestUrl, __assign(__assign({}, init), reqConfig))];
                    case 2:
                        req = _g.sent();
                        r = req;
                        return [4 /*yield*/, resolver(req)];
                    case 3:
                        data = _g.sent();
                        if ((req === null || req === void 0 ? void 0 : req.status) >= 400) {
                            onError(true);
                            return [2 /*return*/, {
                                    res: req,
                                    data: def,
                                    error: true,
                                    status: req === null || req === void 0 ? void 0 : req.status,
                                    config: __assign(__assign(__assign(__assign({}, init), { url: "".concat(baseUrl || '').concat(rawUrl) }), reqConfig), { query: query })
                                }];
                        }
                        else {
                            onResolve(data, req);
                            return [2 /*return*/, {
                                    res: req,
                                    data: data,
                                    error: false,
                                    status: req === null || req === void 0 ? void 0 : req.status,
                                    config: __assign(__assign(__assign(__assign({}, init), { url: "".concat(baseUrl || '').concat(rawUrl) }), reqConfig), { query: query })
                                }];
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _g.sent();
                        onError(err_1);
                        return [2 /*return*/, {
                                res: r,
                                data: def,
                                error: true,
                                status: r === null || r === void 0 ? void 0 : r.status,
                                config: __assign(__assign(__assign({}, init), { url: requestUrl }), reqConfig)
                            }];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
}
exports.createRequestFn = createRequestFn;
var createImperativeFetch = function (ctx) {
    var keys = [
        'GET',
        'DELETE',
        'HEAD',
        'OPTIONS',
        'POST',
        'PUT',
        'PATCH',
        'PURGE',
        'LINK',
        'UNLINK'
    ];
    var baseUrl = ctx.baseUrl;
    return __assign(__assign({}, Object.fromEntries(new Map(keys.map(function (k) { return [
        k.toLowerCase(),
        function (url, config) {
            if (config === void 0) { config = {}; }
            return Client[k.toLowerCase()](hasBaseUrl(url) ? url : baseUrl + url, __assign(__assign({}, ctx), config));
        }
    ]; })))), { config: ctx });
};
/**
 * An Client for making HTTP Requests
 */
var Client = {
    get: createRequestFn('GET', '', {}),
    delete: createRequestFn('DELETE', '', {}),
    head: createRequestFn('HEAD', '', {}),
    options: createRequestFn('OPTIONS', '', {}),
    post: createRequestFn('POST', '', {}),
    put: createRequestFn('PUT', '', {}),
    patch: createRequestFn('PATCH', '', {}),
    purge: createRequestFn('PURGE', '', {}),
    link: createRequestFn('LINK', '', {}),
    unlink: createRequestFn('UNLINK', '', {}),
    extend: createImperativeFetch
};
exports.Client = Client;
