'use client';
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mutateData = exports.queryProvider = exports.gql = exports.cancelRequest = exports.revalidate = exports.useIsomorphicLayoutEffect = exports.createImperativeFetch = exports.getTimePassed = exports.getMiliseconds = void 0;
var React = __importStar(require("react"));
var others_1 = require("../hooks/others");
var use_fetch_1 = require("../hooks/use-fetch");
var internal_1 = require("../internal");
var constants_1 = require("../internal/constants");
var shared_1 = require("./shared");
function getMiliseconds(v) {
    if (typeof v === 'number')
        return v;
    var _a = v.split(' '), amount = _a[0], unit = _a[1];
    var amountNumber = parseFloat(amount);
    if (!(unit in constants_1.UNITS_MILISECONDS_EQUIVALENTS)) {
        return amountNumber;
    }
    // @ts-ignore - This should return the value in miliseconds
    return amountNumber * constants_1.UNITS_MILISECONDS_EQUIVALENTS[unit];
}
exports.getMiliseconds = getMiliseconds;
function getTimePassed(key) {
    return (Date.now() -
        ((0, shared_1.isDefined)(internal_1.requestInitialTimes[key]) ? internal_1.requestInitialTimes[key] : 0));
}
exports.getTimePassed = getTimePassed;
var createImperativeFetch = function (ctx) {
    var keys = [
        'GET',
        'DELETE',
        'HEAD',
        'OPTIONS',
        'POST',
        'PUT',
        'PATCH',
        'PURGE',
        'LINK',
        'UNLINK'
    ];
    var baseUrl = ctx.baseUrl;
    return __assign(__assign({}, Object.fromEntries(new Map(keys.map(function (k) { return [
        k.toLowerCase(),
        function (url, config) {
            if (config === void 0) { config = {}; }
            return use_fetch_1.useFetch[k.toLowerCase()]((0, shared_1.hasBaseUrl)(url) ? url : baseUrl + url, __assign(__assign({}, ctx), config));
        }
    ]; })))), { config: ctx });
};
exports.createImperativeFetch = createImperativeFetch;
exports.useIsomorphicLayoutEffect = shared_1.windowExists
    ? React.useLayoutEffect
    : React.useEffect;
/**
 * Revalidate requests that match an id or ids
 */
function revalidate(id, __reval__) {
    var _a;
    if (__reval__ === void 0) { __reval__ = true; }
    if (Array.isArray(id)) {
        id.map(function (reqId) {
            var _a;
            if ((0, shared_1.isDefined)(reqId)) {
                var key_1 = (0, shared_1.serialize)(reqId);
                var resolveKey = (0, shared_1.serialize)({ idString: key_1 });
                if (__reval__) {
                    internal_1.previousConfig[resolveKey] = undefined;
                }
                (_a = internal_1.abortControllers[resolveKey]) === null || _a === void 0 ? void 0 : _a.abort();
                if (__reval__) {
                    if (!(0, internal_1.isPending)(key_1)) {
                        (0, shared_1.queue)(function () {
                            internal_1.requestsProvider.emit(key_1, {
                                loading: true,
                                error: false
                            });
                        });
                    }
                }
            }
        });
    }
    else {
        if ((0, shared_1.isDefined)(id)) {
            var key_2 = (0, shared_1.serialize)(id);
            var resolveKey = (0, shared_1.serialize)({ idString: key_2 });
            if (__reval__) {
                internal_1.previousConfig[resolveKey] = undefined;
            }
            (_a = internal_1.abortControllers[resolveKey]) === null || _a === void 0 ? void 0 : _a.abort();
            if (__reval__) {
                if (!(0, internal_1.isPending)(key_2)) {
                    (0, shared_1.queue)(function () {
                        internal_1.requestsProvider.emit(key_2, {
                            loading: true,
                            error: false
                        });
                    });
                }
            }
        }
    }
}
exports.revalidate = revalidate;
function cancelRequest(id) {
    if (Array.isArray(id)) {
        id.map(function (reqId) {
            if ((0, shared_1.isDefined)(reqId)) {
                var key_3 = (0, shared_1.serialize)({
                    idString: (0, shared_1.serialize)(reqId)
                });
                if ((0, internal_1.isPending)(key_3)) {
                    revalidate(reqId, false);
                    (0, shared_1.queue)(function () {
                        internal_1.requestsProvider.emit(key_3, {
                            loading: false,
                            error: false
                        });
                    });
                }
            }
        });
    }
    else {
        if ((0, shared_1.isDefined)(id)) {
            var key_4 = (0, shared_1.serialize)({
                idString: (0, shared_1.serialize)(id)
            });
            if ((0, internal_1.isPending)(key_4)) {
                revalidate(id, false);
                (0, shared_1.queue)(function () {
                    internal_1.requestsProvider.emit(key_4, {
                        loading: false,
                        error: false
                    });
                });
            }
        }
    }
}
exports.cancelRequest = cancelRequest;
function gql() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var query = args[0][0];
    var returnObj = {
        value: query,
        variables: {},
        baseUrl: undefined,
        graphqlPath: undefined,
        headers: {}
    };
    return returnObj;
}
exports.gql = gql;
/**
 *
 * @param queries
 * @returns A hook that has full TypeScript support and offers autocomplete for every query passed
 */
function queryProvider(queries, providerConfig) {
    return function useQuery(queryName, otherConfig) {
        var _a, _b, _c;
        var defaults = (providerConfig || {}).defaults;
        var thisDefaults = (_a = (defaults || {})) === null || _a === void 0 ? void 0 : _a[queryName];
        var queryVariables = __assign(__assign({}, thisDefaults === null || thisDefaults === void 0 ? void 0 : thisDefaults.variables), otherConfig === null || otherConfig === void 0 ? void 0 : otherConfig.variables);
        var _d = (providerConfig || {}).config, config = _d === void 0 ? {} : _d;
        var cacheProvider = config.cacheProvider, others = __rest(config, ["cacheProvider"]);
        var g = (0, others_1.useGql)(queries[queryName], __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ cacheProvider: config === null || config === void 0 ? void 0 : config.cacheProvider, graphqlPath: (0, shared_1.isDefined)(thisDefaults === null || thisDefaults === void 0 ? void 0 : thisDefaults.graphqlPath)
                ? thisDefaults === null || thisDefaults === void 0 ? void 0 : thisDefaults.graphqlPath
                : undefined }, otherConfig), others), thisDefaults === null || thisDefaults === void 0 ? void 0 : thisDefaults.headers), { baseUrl: (0, shared_1.isDefined)(thisDefaults === null || thisDefaults === void 0 ? void 0 : thisDefaults.baseUrl)
                ? thisDefaults === null || thisDefaults === void 0 ? void 0 : thisDefaults.baseUrl
                : (0, shared_1.isDefined)((_b = providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.config) === null || _b === void 0 ? void 0 : _b.baseUrl)
                    ? (_c = providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.config) === null || _c === void 0 ? void 0 : _c.baseUrl
                    : undefined }), otherConfig), { headers: __assign(__assign(__assign({}, others === null || others === void 0 ? void 0 : others.headers), thisDefaults === null || thisDefaults === void 0 ? void 0 : thisDefaults.headers), otherConfig === null || otherConfig === void 0 ? void 0 : otherConfig.headers) }), { __fromProvider: true }), { default: {
                data: ((0, shared_1.isDefined)(thisDefaults === null || thisDefaults === void 0 ? void 0 : thisDefaults.value)
                    ? thisDefaults.value
                    : /*
                       * This should also work with graphql, so an id may or may not have a
                       * 'value' property (when using the `gql` function)
                       */
                        // @ts-ignore
                        otherConfig === null || otherConfig === void 0 ? void 0 : otherConfig.default)
            }, variables: queryVariables }));
        var thisData = React.useMemo(function () { return (__assign(__assign({}, g === null || g === void 0 ? void 0 : g.data), { variables: queryVariables })); }, [(0, shared_1.serialize)({ data: g === null || g === void 0 ? void 0 : g.data, queryVariables: queryVariables })]);
        return __assign(__assign({}, g), { config: __assign(__assign({}, g === null || g === void 0 ? void 0 : g.config), { config: undefined }), data: thisData });
    };
}
exports.queryProvider = queryProvider;
/**
 * Force mutation in requests from anywhere. This doesn't revalidate requests
 */
function mutateData() {
    var pairs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        pairs[_i] = arguments[_i];
    }
    var _loop_1 = function (pair) {
        try {
            var k = pair[0], v_1 = pair[1], _revalidate = pair[2];
            var key_5 = (0, shared_1.serialize)({ idString: (0, shared_1.serialize)(k) });
            var requestCallId = '';
            if ((0, shared_1.isFunction)(v_1)) {
                var newVal_1 = v_1(internal_1.cacheForMutation[key_5]);
                internal_1.runningMutate[key_5] = undefined;
                internal_1.requestsProvider.emit(key_5, {
                    data: newVal_1,
                    isMutating: true,
                    requestCallId: requestCallId
                });
                if (_revalidate) {
                    internal_1.previousConfig[key_5] = undefined;
                    internal_1.requestsProvider.emit((0, shared_1.serialize)(k), {});
                }
                (0, shared_1.queue)(function () {
                    internal_1.valuesMemory[key_5] = newVal_1;
                    internal_1.cacheForMutation[key_5] = newVal_1;
                });
            }
            else {
                internal_1.runningMutate[key_5] = undefined;
                internal_1.requestsProvider.emit(key_5, {
                    requestCallId: requestCallId,
                    isMutating: true,
                    data: v_1
                });
                if (_revalidate) {
                    internal_1.previousConfig[key_5] = undefined;
                    internal_1.requestsProvider.emit((0, shared_1.serialize)(k), {});
                }
                (0, shared_1.queue)(function () {
                    internal_1.valuesMemory[key_5] = v_1;
                    internal_1.cacheForMutation[key_5] = v_1;
                });
            }
        }
        catch (err) { }
    };
    for (var _a = 0, pairs_1 = pairs; _a < pairs_1.length; _a++) {
        var pair = pairs_1[_a];
        _loop_1(pair);
    }
}
exports.mutateData = mutateData;
