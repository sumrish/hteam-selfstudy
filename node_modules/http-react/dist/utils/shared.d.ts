/// <reference types="node" />
import { FetchContextType, ImperativeFetch, RequestWithBody } from '../types';
export declare const windowExists: boolean;
export declare function notNull(target: any): boolean;
export declare function getRequestHeaders(req: Request): {
    [k: string]: any;
};
export declare function isDefined(target: any): boolean;
export declare function isFunction(target: any): boolean;
export declare function hasBaseUrl(target: string): boolean;
export declare function jsonCompare(a: any, b: any): boolean;
/**
 * A serialize function that returns a JSON string
 */
export declare function serialize(input: any, replacer?: any, space?: any): string;
export declare const isFormData: (target: any) => boolean;
export declare function queue(callback: any, time?: number): NodeJS.Timeout;
/**
 *
 * @param str The target string
 * @param $params The params to parse in the url
 *
 * Params should be separated by `"/"`, (e.g. `"/api/[resource]/:id"`)
 *
 * URL search params will not be affected
 */
export declare function setURLParams(str?: string, $params?: any): string;
/**
 * Creates a new request function. This is for usage with fetcher and fetcher.extend
 */
export declare function createRequestFn(method: string, baseUrl: string, $headers: any): RequestWithBody;
/**
 * An Client for making HTTP Requests
 */
declare const Client: {
    get: RequestWithBody;
    delete: RequestWithBody;
    head: RequestWithBody;
    options: RequestWithBody;
    post: RequestWithBody;
    put: RequestWithBody;
    patch: RequestWithBody;
    purge: RequestWithBody;
    link: RequestWithBody;
    unlink: RequestWithBody;
    extend: (ctx: FetchContextType) => ImperativeFetch;
};
export { Client };
